# Generated by Django 4.1 on 2022-09-06 16:45

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('games', '0001_initial'),
        ('user', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=40)),
                ('name', models.CharField(max_length=20)),
                ('surname', models.CharField(max_length=20)),
                ('age', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(limit_value=0), django.core.validators.MaxValueValidator(limit_value=90)])),
                ('location', models.CharField(max_length=30)),
                ('level', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(limit_value=0), django.core.validators.MaxValueValidator(limit_value=3000)])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Profile', related_query_name='Profiles', to='user.user')),
            ],
        ),
        migrations.CreateModel(
            name='VacBan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('for_date', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='VacBan', related_query_name='VacBans', to='games.application')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='VacBan', related_query_name='VacBans', to='user.user')),
            ],
        ),
        migrations.CreateModel(
            name='UserItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField(default=1, validators=[django.core.validators.MinValueValidator(limit_value=0.03), django.core.validators.MaxValueValidator(limit_value=3000)])),
                ('is_on_sale', models.BooleanField(default=False)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='UserItem', related_query_name='UserItems', to='games.item')),
            ],
        ),
        migrations.CreateModel(
            name='ProfileComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ProfileComment', related_query_name='ProfileComments', to='account.profile')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, related_name='ProfileComment', related_query_name='ProfileComments', to='user.user')),
            ],
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_tradable', models.BooleanField(default=True)),
                ('on_sale', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Inventory', related_query_name='Inventories', to='user.user')),
                ('user_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Inventory', related_query_name='Inventories', to='account.useritem')),
            ],
        ),
        migrations.CreateModel(
            name='Friend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Friend+', related_query_name='Friends+', to='user.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Friend', related_query_name='Friends', to='user.user')),
            ],
        ),
        migrations.CreateModel(
            name='BuyRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wish_price', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(limit_value=0), django.core.validators.MaxValueValidator(limit_value=3000)])),
                ('amount', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(limit_value=1), django.core.validators.MaxValueValidator(limit_value=1000)])),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='BuyRequest', related_query_name='BuyRequests', to='games.item')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='BuyRequest', related_query_name='BuyRequests', to='user.user')),
            ],
        ),
        migrations.CreateModel(
            name='Balance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(limit_value=0), django.core.validators.MaxValueValidator(limit_value=100000)])),
                ('pay_card', models.CharField(max_length=16)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Balance', related_query_name='Balance', to='user.user')),
            ],
        ),
    ]
